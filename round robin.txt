//Round Robin


#include <iostream>

using namespace std;

struct Process {
    int processId;
    int arrivalTime;
    int burstTime;
};

int main() {
    int n, timeQuantum;
    cout << "Enter the number of processes: ";
    cin >> n;

    cout << "Enter the time quantum: ";
    cin >> timeQuantum;

    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].processId = i + 1;
        cout << "Enter arrival time for Process " << processes[i].processId << ": ";
        cin >> processes[i].arrivalTime;
        cout << "Enter burst time for Process " << processes[i].processId << ": ";
        cin >> processes[i].burstTime;
    }

    int currentTime = 0;
    int remainingProcesses = n;
    int completedProcesses = 0;
    int currentProcessIndex = 0;
    int remainingBurstTime[n];

    for (int i = 0; i < n; i++) {
        remainingBurstTime[i] = processes[i].burstTime;
    }

    cout << "Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n";
    while (completedProcesses < n) {
        currentProcessIndex %= n;

        if (remainingBurstTime[currentProcessIndex] > 0 && processes[currentProcessIndex].arrivalTime <= currentTime) {
            int timeSlice = min(timeQuantum, remainingBurstTime[currentProcessIndex]);
            remainingBurstTime[currentProcessIndex] -= timeSlice;

            currentTime += timeSlice;

            if (remainingBurstTime[currentProcessIndex] == 0) {
                int waitingTime = currentTime - processes[currentProcessIndex].arrivalTime - processes[currentProcessIndex].burstTime;
                int turnaroundTime = waitingTime + processes[currentProcessIndex].burstTime;

                cout << processes[currentProcessIndex].processId << "\t\t" << processes[currentProcessIndex].arrivalTime << "\t\t" << processes[currentProcessIndex].burstTime << "\t\t" << waitingTime << "\t\t" << turnaroundTime << endl;

                completedProcesses++;
            }
        }
        currentProcessIndex++;
    }

    return 0;
}





